// index.js

// Carga las variables de entorno desde .env (DEBE SER LA PRIMERA LÍNEA)
require('dotenv').config(); 

const express = require('express');
const cors = require('cors');
const app = express();
// Usa la variable de entorno para el puerto, si no existe, usa 3000
const port = process.env.PORT || 3000; 

// Importa la configuración de la base de datos (Sequelize y modelos)
const db = require('./config/db.config'); 

// Middleware
app.use(cors());
app.use(express.json());


// ==========================================================
// CONFIGURACIÓN DE RUTAS API (CONTROLADORES)
// ==========================================================

// --- 1. Rutas de Estudiantes ---
app.get('/api/estudiantes', async (req, res) => {
    try {
        // Incluye el modelo Grupo para ver la relación al consultar
        // NOTA: Si el modelo Grupo aún no existe o no tiene las relaciones definidas, esto fallará. 
        // Si tienes problemas, quita el 'include' temporalmente.
        const data = await db.Estudiante.findAll({
            // include: [{ model: db.Grupo, attributes: ['grado', 'grupo'] }] // Descomenta solo si tienes la relación Grupo
        }); 
        res.json(data); 
    } catch (error) {
        console.error("Error al obtener estudiantes:", error);
        res.status(500).send({ message: "Error en el servidor al consultar estudiantes. ¿La BD está activa?" });
    }
});

// NUEVA RUTA: Registrar un nuevo estudiante
app.post('/api/estudiantes', async (req, res) => {
    try {
        // Intenta crear el estudiante usando los datos enviados
        const nuevoEstudiante = await db.Estudiante.create(req.body);
        res.status(201).json(nuevoEstudiante);
    } catch (error) {
        // Lógica de DEBUGGING para capturar el error detallado
        console.error("--- ERROR AL CREAR ESTUDIANTE (DETALLE) ---");
        console.error("Cuerpo de la Petición (Req. Body):", req.body);
        console.error("Nombre del Error:", error.name);
        console.error("Mensaje Completo del Error:", error.message);
        console.error("-------------------------------------------");

        if (error.name === 'SequelizeValidationError') {
            return res.status(400).send({ message: "Error de validación: Faltan campos requeridos o el formato es incorrecto.", details: error.errors });
        }
        if (error.name === 'SequelizeForeignKeyConstraintError') {
            return res.status(400).send({ message: "Error de Clave Foránea: El profesor asignado no existe.", details: error.message });
        }
        
        res.status(500).send({ message: "Error en el servidor al registrar el estudiante." });
    }
});


// ==========================================================
// 2. SINCRONIZACIÓN DE LA BASE DE DATOS, SEEDING Y ARRANQUE
// ==========================================================

// 💡 IMPORTANTE: 'force: true' BORRARÁ Y RECREARÁ TODAS LAS TABLAS CADA VEZ QUE INICIES EL SERVIDOR.
db.sequelize.sync({ force: true }) 
  .then(async () => {
    console.log("-----------------------------------------");
    console.log("¡Conexión a la BD exitosa!");
    console.log("Modelos sincronizados (y RECREADOS) con la Base de Datos: gestion_escolar");
    
    // 💡 SEEDING TEMPORAL PARA EVITAR FALLOS DE CLAVE FORÁNEA 💡
    const countProfesores = await db.Profesor.count();
    if (countProfesores === 0) {
        await db.Profesor.create({
            identificacion: 'CC999999999',
            nombre: 'Profesor Guía Base',
            email: 'base@escuela.com',
            especialidad: 'General',
            estado: 'Activo'
        });
        console.log("✅ Se insertó un Profesor de prueba (ID 1) para las claves foráneas.");
    }
    
    // 💡 SEEDING DE UN ESTUDIANTE DE PRUEBA (¡CAMPOS CORREGIDOS!) 💡
    // NOTA: Se usan los campos correctos (primer_nombre, documento_numero, fecha_nacimiento, etc.)
    const countEstudiantes = await db.Estudiante.count();
    if (countEstudiantes === 0) {
        await db.Estudiante.create({
            codigo: "TEST001",
            identificacion_tipo: "TI", // Tipo de documento es obligatorio
            documento_numero: "9999999999", // Número de documento es obligatorio
            primer_nombre: "Estudiante", // Primer nombre es obligatorio
            primer_apellido: "Prueba", // Primer apellido es obligatorio
            sexo: "M", // Sexo es obligatorio
            fecha_nacimiento: "2010-01-01", // Fecha de nacimiento es obligatorio
            estado: "En curso",
            // Se asume que el campo profesor_guia_id existe en el modelo y está definido como relación.
            // Si el campo no existe en el modelo, descomenta esta línea:
            // profesor_guia_id: 1 
        });
        console.log("✅ Se insertó un Estudiante de Prueba para confirmar el GET.");
    }

    console.log("-----------------------------------------");
    
    // app.listen() se ejecuta SOLO después de la conexión exitosa
    app.listen(port, () => {
      console.log(`Servidor corriendo en http://localhost:${port}`);
    });

  })
  .catch((err) => {
    console.error("¡ERROR DE CONEXIÓN A LA BD O SINCRONIZACIÓN!");
    console.error("El servidor NO se ha iniciado.");
    console.error("Detalle del error:", err.message);
    process.exit(1); 
  });
